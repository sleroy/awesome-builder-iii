AWSTemplateFormatVersion: "2010-09-09"
Description: This template provision a VPC that emulates the On-premise environment.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Environment configuration"
        Parameters:
          - BusinessUnit
          - Environment
      - Label:
          default: "VPC Configuration"
        Parameters:
          - VpcStack
          - pCidr
      - Label:
          default: File Gateway Configuration
        Parameters:
          - type
          - cacheSize
          - region
          - keypair
    ParameterLabels:
      BusinessUnit:
        default: "Provides the Business Unit these resources"
      Environment:
        default: "Provides an environment (dev,test, prod)"
      VpcStack:
        default: Provides the stack created with the OnPremise VPC
      region:
        default: 'Activation region:'
      type:
        default: 'Instance Type:'
      keypair:
        default: 'Provides the keypair to access the FGW'
Mappings:
  RegionMap:
    us-east-1:
      "HVM64": "ami-02f3f602d23f1659d"
    us-west-1:
      "HVM64": "ami-0bdb828fd58c52235"
    eu-west-1:
      "HVM64": "ami-047bb4163c506cd98"
    ap-southeast-1:
      "HVM64": "ami-08569b978cc4dfa10"
    ap-northeast-1:
      "HVM64": "ami-06cd52961ce9f0d85"
Parameters:
  BusinessUnit:
    Description: Defines the Business Unit that uses thes resources
    Default: OnPremise
    Type: String
  Environment:
    Description: Choose an environment where you want to create this stack
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - SIT
      - UAT
      - prod
  VpcStack:
    Type: String
    Description: "Provides the name of the stack"
    Default: OnPrem
  keypair:
    Description: Provides the keypair to give access to the FGW    
    Type: "AWS::EC2::KeyPair::KeyName"    
  cacheSize:
    Description: (GiB)
    Default: "10"
    Type: Number
  type:
    Default: t3.medium
    Type: String
Resources:
  ## FILE GATEWAY
  FGW1InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref FGW1Role
  FGW1Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: 2012-10-17
      Path: /
      ManagedPolicyArns:
        # The managed IAM policy AmazonSSMManagedInstanceCore grants access to Session Manager
        - !Sub arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  FGW1RolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action: 'storagegateway:*'
            Effect: Allow
            Resource: '*'
          - Action: 'ec2:DescribeNetworkInterfaces'
            Effect: Allow
            Resource: '*'
          - Action: 'ec2:CreateTags'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: FGW1RolePolicy
      Roles:
        - !Ref FGW1Role
  FGW1SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStack}-OnPremVPC"
      GroupDescription: Hybrid Workshop - File Gateway 1 Access All Ports
      SecurityGroupEgress:
        # The SSM Agent connects to Session Manager over TCP 443
        - Description: allow outbound HTTPS to the VPC
          CidrIp:
            Fn::ImportValue:
              !Sub "${VpcStack}-OnPremVPCCidr"
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        - Description: HTTPS Internet
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp          
        - Description: HTTP Internet
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp          
        - FromPort: 1024
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          ToPort: 65535
          Description: Ephemereal ports
      SecurityGroupIngress:
        - FromPort: 0
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref linux1SecurityGroup
          ToPort: 65535
        - FromPort: 0
          IpProtocol: udp
          SourceSecurityGroupId: !Ref linux1SecurityGroup
          ToPort: 65535
        - FromPort: -1
          IpProtocol: icmp
          SourceSecurityGroupId: !Ref linux1SecurityGroup
          ToPort: -1
        - FromPort: 22
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          ToPort: 22
          Description: SSH                    
        - Description: allow outbound HTTPS to the VPC
          CidrIp:
            Fn::ImportValue:
              !Sub "${VpcStack}-OnPremVPCCidr"
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
  linux1SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId:
        Fn::ImportValue:
          !Sub "${VpcStack}-OnPremVPC"
      GroupDescription: Security Group EC2 who access to FileGateway
      SecurityGroupIngress:
        - FromPort: 22
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          ToPort: 22
  FGW1Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ''
            - - OnPremise - File Gateway server (
              - !Ref 'AWS::StackName'
              - )
      InstanceType: !Ref type
      IamInstanceProfile: !Ref FGW1InstanceProfile
      InstanceInitiatedShutdownBehavior: terminate
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      KeyName: !Ref keypair
      UserData: !Base64 
                  'Fn::Join':
                    - ''
                    - - |
                        #!/bin/bash
                      - |
                        echo clear log > /var/log/cloud-init-output.log
                      - |
                        pip install --upgrade awscli &> /tmp/pip
                      - '/usr/local/bin/aws configure set default.region '
                      - !Ref 'AWS::Region'
                      - |+

                      - >
                        instance=$(curl
                        http://169.254.169.254/latest/meta-data/instance-id)
                      - |
                        ip=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
                      - |
                        echo $ip
                      - |
                        name=Hybrid-Workshop-File-Gateway-Server-1-${instance}
                      - |
                        gwMode=FILE_S3
                      - region=
                      - !Ref region
                      - |+

                      - |
                        complete=0
                      - |
                        count=1
                      - |
                        while [ $complete != 2 -a $count != 30 ]; do
                      - |2
                        if [ $count -ne 1 ]; then
                      - |2
                          sleep 15
                      - |2
                        fi
                      - |2
                          if [ $complete -eq 0 ]; then
                      - |2
                          code=$(echo -e "GET ?gatewayType=${gwMode}&activationRegion=${region} HTTP/1.1\n\n" | nc localhost 8080 | grep -oP 'activationKey=([\w-]+)' | cut -f2 -d=)
                      - |2
                          if [[ $code != "" ]]; then
                      - |2
                            gatewayarn=$(/usr/local/bin/aws storagegateway activate-gateway --activation-key ${code} --gateway-name ${name} --gateway-timezone GMT --gateway-type ${gwMode} --gateway-region ${region} --region ${region} --output text)
                      - |2
                            if [ $? -eq 0 ]; then complete=1; echo ${gatewayarn}; fi
                      - |2
                          fi
                      - |2
                          fi
                      - |2
                          if [ $complete -eq 1 ]; then
                      - |2
                          disks=$(/usr/local/bin/aws storagegateway list-local-disks --gateway-arn ${gatewayarn} --region ${region} --output text)
                      - |2
                          disks=$(echo "$disks"| awk '{print $4}')
                      - |2
                          diskarray=($disks)
                      - |2
                          /usr/local/bin/aws storagegateway add-cache --gateway-arn ${gatewayarn} --disk-ids --region ${region} ${diskarray[0]}
                      - |2
                          if [ $? -eq 0 ]; then complete=2; fi
                      - |2
                          fi
                      - |2
                        count=$((count+1))
                      - |
                        done
                      - |
                        if [ $complete -eq 2 ]; then
                      - ' /usr/local/bin/aws ec2 create-tags --resources ${instance} --tags "Key=Name,Value='
                      - Hybrid Workshop - Migrate - Gateway Server 1 (Activated) - (
                      - !Ref 'AWS::StackName'
                      - |
                        )"
                      - |
                        else
                      - ' /usr/local/bin/aws ec2 create-tags --resources ${instance} --tags "Key=Name,Value='
                      - >-
                        Hybrid Workshop - Migrate - Gateway Server 1 (FAILED ACTIVATION) -
                        (
                      - !Ref 'AWS::StackName'
                      - |
                        )"
                      - |
                        fi
                      - |
                        echo finished
                      - |
                        cat /var/log/cloud-init-output.log >> /tmp/message      
      SecurityGroupIds:
        - !Ref FGW1SecurityGroup
      SubnetId: 
        Fn::ImportValue:
            'Fn::Sub': '${VpcStack}-OnPremPublicSubnet'
  gwdisk2attach:
      Type: 'AWS::EC2::VolumeAttachment'
      Properties:
        Device: /dev/sdc
        InstanceId: !Ref FGW1Instance
        VolumeId: !Ref gwdisk2
  gwdisk2:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !GetAtt
        - "FGW1Instance"
        - "AvailabilityZone"
      Size: !Ref cacheSize
      VolumeType: gp2
      Tags:
        - Key: Name
          Value: !Sub "Hybrid Workshop - File Gateway Server 1 - EBS 2 - Cache (${VpcStack})"
        - Key: businessUnit
          Value: !Ref BusinessUnit
        - Key: environment
          Value: !Ref Environment
Outputs:
  PublicIp:
    Description: FSInstance Public IP
    Value: !GetAtt FGW1Instance.PublicIp
    Export:
      Name: !Sub "${VpcStack}-PublicIp"

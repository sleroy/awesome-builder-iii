Resources:
  CloudVpc23C913BF:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: CloudVpcStack/CloudVpc
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/Resource
  CloudVpcPublicSubnet1SubnetA51194C1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: CloudVpc23C913BF
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.0.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: CloudVpcStack/CloudVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PublicSubnet1/Subnet
  CloudVpcPublicSubnet1RouteTable485DA516:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: CloudVpc23C913BF
      Tags:
        - Key: Name
          Value: CloudVpcStack/CloudVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PublicSubnet1/RouteTable
  CloudVpcPublicSubnet1RouteTableAssociationB1A8065D:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: CloudVpcPublicSubnet1RouteTable485DA516
      SubnetId:
        Ref: CloudVpcPublicSubnet1SubnetA51194C1
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PublicSubnet1/RouteTableAssociation
  CloudVpcPublicSubnet1DefaultRoute3FA1F2E0:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: CloudVpcPublicSubnet1RouteTable485DA516
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: CloudVpcIGW0422C09E
    DependsOn:
      - CloudVpcVPCGW35EA1E90
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PublicSubnet1/DefaultRoute
  CloudVpcPublicSubnet1EIPFBED63B6:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: CloudVpcStack/CloudVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PublicSubnet1/EIP
  CloudVpcPublicSubnet1NATGateway38B96014:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: CloudVpcPublicSubnet1SubnetA51194C1
      AllocationId:
        Fn::GetAtt:
          - CloudVpcPublicSubnet1EIPFBED63B6
          - AllocationId
      Tags:
        - Key: Name
          Value: CloudVpcStack/CloudVpc/PublicSubnet1
    DependsOn:
      - CloudVpcPublicSubnet1DefaultRoute3FA1F2E0
      - CloudVpcPublicSubnet1RouteTableAssociationB1A8065D
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PublicSubnet1/NATGateway
  CloudVpcPublicSubnet2Subnet53D2CCE1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: CloudVpc23C913BF
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.32.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: CloudVpcStack/CloudVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PublicSubnet2/Subnet
  CloudVpcPublicSubnet2RouteTable90448ED4:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: CloudVpc23C913BF
      Tags:
        - Key: Name
          Value: CloudVpcStack/CloudVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PublicSubnet2/RouteTable
  CloudVpcPublicSubnet2RouteTableAssociationA750A4E9:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: CloudVpcPublicSubnet2RouteTable90448ED4
      SubnetId:
        Ref: CloudVpcPublicSubnet2Subnet53D2CCE1
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PublicSubnet2/RouteTableAssociation
  CloudVpcPublicSubnet2DefaultRoute42E86082:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: CloudVpcPublicSubnet2RouteTable90448ED4
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: CloudVpcIGW0422C09E
    DependsOn:
      - CloudVpcVPCGW35EA1E90
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PublicSubnet2/DefaultRoute
  CloudVpcPublicSubnet2EIP45BB7CEC:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: CloudVpcStack/CloudVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PublicSubnet2/EIP
  CloudVpcPublicSubnet2NATGatewayD81C4974:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: CloudVpcPublicSubnet2Subnet53D2CCE1
      AllocationId:
        Fn::GetAtt:
          - CloudVpcPublicSubnet2EIP45BB7CEC
          - AllocationId
      Tags:
        - Key: Name
          Value: CloudVpcStack/CloudVpc/PublicSubnet2
    DependsOn:
      - CloudVpcPublicSubnet2DefaultRoute42E86082
      - CloudVpcPublicSubnet2RouteTableAssociationA750A4E9
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PublicSubnet2/NATGateway
  CloudVpcPublicSubnet3SubnetFC968ED7:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: CloudVpc23C913BF
      AvailabilityZone: us-east-1c
      CidrBlock: 10.0.64.0/19
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: CloudVpcStack/CloudVpc/PublicSubnet3
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PublicSubnet3/Subnet
  CloudVpcPublicSubnet3RouteTableE9740F8E:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: CloudVpc23C913BF
      Tags:
        - Key: Name
          Value: CloudVpcStack/CloudVpc/PublicSubnet3
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PublicSubnet3/RouteTable
  CloudVpcPublicSubnet3RouteTableAssociationA844CEB8:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: CloudVpcPublicSubnet3RouteTableE9740F8E
      SubnetId:
        Ref: CloudVpcPublicSubnet3SubnetFC968ED7
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PublicSubnet3/RouteTableAssociation
  CloudVpcPublicSubnet3DefaultRoute9F4959A4:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: CloudVpcPublicSubnet3RouteTableE9740F8E
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: CloudVpcIGW0422C09E
    DependsOn:
      - CloudVpcVPCGW35EA1E90
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PublicSubnet3/DefaultRoute
  CloudVpcPublicSubnet3EIPB4BEC0EE:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: CloudVpcStack/CloudVpc/PublicSubnet3
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PublicSubnet3/EIP
  CloudVpcPublicSubnet3NATGatewayA6793594:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        Ref: CloudVpcPublicSubnet3SubnetFC968ED7
      AllocationId:
        Fn::GetAtt:
          - CloudVpcPublicSubnet3EIPB4BEC0EE
          - AllocationId
      Tags:
        - Key: Name
          Value: CloudVpcStack/CloudVpc/PublicSubnet3
    DependsOn:
      - CloudVpcPublicSubnet3DefaultRoute9F4959A4
      - CloudVpcPublicSubnet3RouteTableAssociationA844CEB8
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PublicSubnet3/NATGateway
  CloudVpcPrivateSubnet1Subnet639E6789:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: CloudVpc23C913BF
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.96.0/19
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: CloudVpcStack/CloudVpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PrivateSubnet1/Subnet
  CloudVpcPrivateSubnet1RouteTableB3CCE068:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: CloudVpc23C913BF
      Tags:
        - Key: Name
          Value: CloudVpcStack/CloudVpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PrivateSubnet1/RouteTable
  CloudVpcPrivateSubnet1RouteTableAssociation9056037D:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: CloudVpcPrivateSubnet1RouteTableB3CCE068
      SubnetId:
        Ref: CloudVpcPrivateSubnet1Subnet639E6789
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PrivateSubnet1/RouteTableAssociation
  CloudVpcPrivateSubnet1DefaultRoute18EF4AB9:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: CloudVpcPrivateSubnet1RouteTableB3CCE068
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: CloudVpcPublicSubnet1NATGateway38B96014
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PrivateSubnet1/DefaultRoute
  CloudVpcPrivateSubnet2SubnetFDC3FE97:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: CloudVpc23C913BF
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.128.0/19
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: CloudVpcStack/CloudVpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PrivateSubnet2/Subnet
  CloudVpcPrivateSubnet2RouteTable4D3640B1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: CloudVpc23C913BF
      Tags:
        - Key: Name
          Value: CloudVpcStack/CloudVpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PrivateSubnet2/RouteTable
  CloudVpcPrivateSubnet2RouteTableAssociationC3191E3C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: CloudVpcPrivateSubnet2RouteTable4D3640B1
      SubnetId:
        Ref: CloudVpcPrivateSubnet2SubnetFDC3FE97
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PrivateSubnet2/RouteTableAssociation
  CloudVpcPrivateSubnet2DefaultRoute1F54118B:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: CloudVpcPrivateSubnet2RouteTable4D3640B1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: CloudVpcPublicSubnet2NATGatewayD81C4974
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PrivateSubnet2/DefaultRoute
  CloudVpcPrivateSubnet3Subnet3FF7AB0D:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: CloudVpc23C913BF
      AvailabilityZone: us-east-1c
      CidrBlock: 10.0.160.0/19
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: CloudVpcStack/CloudVpc/PrivateSubnet3
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PrivateSubnet3/Subnet
  CloudVpcPrivateSubnet3RouteTable0868BC01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: CloudVpc23C913BF
      Tags:
        - Key: Name
          Value: CloudVpcStack/CloudVpc/PrivateSubnet3
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PrivateSubnet3/RouteTable
  CloudVpcPrivateSubnet3RouteTableAssociation678739B8:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: CloudVpcPrivateSubnet3RouteTable0868BC01
      SubnetId:
        Ref: CloudVpcPrivateSubnet3Subnet3FF7AB0D
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PrivateSubnet3/RouteTableAssociation
  CloudVpcPrivateSubnet3DefaultRoute232D88BD:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: CloudVpcPrivateSubnet3RouteTable0868BC01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: CloudVpcPublicSubnet3NATGatewayA6793594
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/PrivateSubnet3/DefaultRoute
  CloudVpcIGW0422C09E:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CloudVpcStack/CloudVpc
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/IGW
  CloudVpcVPCGW35EA1E90:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: CloudVpc23C913BF
      InternetGatewayId:
        Ref: CloudVpcIGW0422C09E
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpc/VPCGW
  CloudVpcStackunprocessedvideobucket37933076:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: 841493508515-unprocessedvideo-bucket
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 30
            ExpirationInDays: 30
            ExpiredObjectDeleteMarker: false
            Id: expire-videos-after-30-days
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpcStack-unprocessedvideo-bucket/Resource
  CloudVpcStackunprocessedvideobucketPolicy7DAD6AA2:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: CloudVpcStackunprocessedvideobucket37933076
      PolicyDocument:
        Statement:
          - Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Effect: Deny
            Principal:
              AWS: "*"
            Resource:
              - Fn::GetAtt:
                  - CloudVpcStackunprocessedvideobucket37933076
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - CloudVpcStackunprocessedvideobucket37933076
                        - Arn
                    - /*
          - Action: s3:*
            Effect: Allow
            Principal:
              AWS: "*"
            Resource:
              Fn::Join:
                - ""
                - - Fn::GetAtt:
                      - CloudVpcStackunprocessedvideobucket37933076
                      - Arn
                  - /*
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpcStack-unprocessedvideo-bucket/Policy/Resource
  CloudVpcStackunprocessedvideobucketNotifications07A772C3:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: CloudVpcStackunprocessedvideobucket37933076
      NotificationConfiguration:
        EventBridgeConfiguration: {}
      Managed: true
    Metadata:
      aws:cdk:path: CloudVpcStack/CloudVpcStack-unprocessedvideo-bucket/Notifications/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: CloudVpcStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: CloudVpcStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: |
          import boto3  # type: ignore
          import json
          import logging
          import urllib.request

          s3 = boto3.client("s3")

          EVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'

          CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations", "LambdaFunctionConfigurations"]

          def handler(event: dict, context):
            response_status = "SUCCESS"
            error_message = ""
            try:
              props = event["ResourceProperties"]
              bucket = props["BucketName"]
              notification_configuration = props["NotificationConfiguration"]
              request_type = event["RequestType"]
              managed = props.get('Managed', 'true').lower() == 'true'
              stack_id = event['StackId']

              if managed:
                config = handle_managed(request_type, notification_configuration)
              else:
                config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

              put_bucket_notification_configuration(bucket, config)
            except Exception as e:
              logging.exception("Failed to put bucket notification configuration")
              response_status = "FAILED"
              error_message = f"Error: {str(e)}. "
            finally:
              submit_response(event, context, response_status, error_message)

          def handle_managed(request_type, notification_configuration):
            if request_type == 'Delete':
              return {}
            return notification_configuration

          def handle_unmanaged(bucket, stack_id, request_type, notification_configuration):
            external_notifications = find_external_notifications(bucket, stack_id)

            if request_type == 'Delete':
              return external_notifications

            def with_id(notification):
              notification['Id'] = f"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}"
              return notification

            notifications = {}
            for t in CONFIGURATION_TYPES:
              external = external_notifications.get(t, [])
              incoming = [with_id(n) for n in notification_configuration.get(t, [])]
              notifications[t] = external + incoming

            if EVENTBRIDGE_CONFIGURATION in notification_configuration:
              notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]
            elif EVENTBRIDGE_CONFIGURATION in external_notifications:
              notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]

            return notifications

          def find_external_notifications(bucket, stack_id):
            existing_notifications = get_bucket_notification_configuration(bucket)
            external_notifications = {}
            for t in CONFIGURATION_TYPES:
              external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]

            if EVENTBRIDGE_CONFIGURATION in existing_notifications:
              external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]

            return external_notifications

          def get_bucket_notification_configuration(bucket):
            return s3.get_bucket_notification_configuration(Bucket=bucket)

          def put_bucket_notification_configuration(bucket, notification_configuration):
            s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)

          def submit_response(event: dict, context, response_status: str, error_message: str):
            response_body = json.dumps(
              {
                "Status": response_status,
                "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                "StackId": event["StackId"],
                "RequestId": event["RequestId"],
                "LogicalResourceId": event["LogicalResourceId"],
                "NoEcho": False,
              }
            ).encode("utf-8")
            headers = {"content-type": "", "content-length": str(len(response_body))}
            try:
              req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
              with urllib.request.urlopen(req) as response:
                print(response.read().decode("utf-8"))
              print("Status code: " + response.reason)
            except Exception as e:
                print("send(..) failed executing request.urlopen(..): " + str(e))
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: python3.9
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: CloudVpcStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/0WOy27CMBBFv4W9M+WxaFkCQhWbygoV28oxgxiS2Cgeg5CVf6+DA17dM0fX1p3D5xSmE3V3hT7WRUMVhD0rXYuo/gLqOYTDVYvNyRzkRkhfNaT3vjLIg8tUWs/4q6oGs89u5ZzVpJiseZcH2O7kED+KvxXjXT2E7OgWMX+8M4xd5FchLRmvFcet5xYN98ItIKy9rtOzkVJIG1c/sk53L0i1EEqbNj8zN8dOL0p01nc6dUbuhbFHhIv7uM2W8AWzycURFZ03TC1CmfIfnUckxF0BAAA=
    Metadata:
      aws:cdk:path: CloudVpcStack/CDKMetadata/Default
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

